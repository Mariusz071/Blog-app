{"version":3,"sources":["serviceWorker.js","actions/index.js","reducers/index.js","reducers/reducer_posts.js","components/posts_index.js","components/post_new.js","components/post_display.js","index.js"],"names":["Boolean","window","location","hostname","match","FETCH_POSTS","CREATE_POST","FETCH_SINGLE_POST","DELETE_POST","ROOT_URL","API_KEY","rootReducer","combineReducers","posts","state","arguments","length","undefined","action","type","_","mapKeys","payload","data","Object","objectSpread","defineProperty","id","omit","form","formReducer","PostsIndex","this","props","fetchPosts","map","post","react_default","a","createElement","className","key","react_router_dom_es","to","concat","title","renderPosts","Component","connect","request","axios","get","PostsNew","field","_field$meta","meta","touched","error","label","assign","input","values","_this","createPost","history","push","handleSubmit","onSubmit","bind","redux_form_es","name","component","renderField","reduxForm","validate","errors","categories","content","callback","then","PostDisplay","params","fetchSinglePost","e","deletePost","_this2","onClick","onClickDeleteHandler","_ref","ownProps","delete","navigator","serviceWorker","ready","registration","unregister","createStoreWithMiddleware","applyMiddleware","promise","createStore","ReactDOM","render","es","store","reducers","path","document","getElementById"],"mappings":"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","file":"static/js/main.b79ccaa6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import axios from 'axios';\nexport const FETCH_POSTS = 'fetch_posts';\nexport const CREATE_POST = 'create_post';\nexport const FETCH_SINGLE_POST = 'fetch_single_post';\nexport const DELETE_POST = 'delete_post';\n\nconst ROOT_URL = 'https://reduxblog.herokuapp.com/api/';\nconst API_KEY = '?key=Mariusz071';\n\nexport function fetchPosts() {\n    const request = axios.get(`${ROOT_URL}/posts${API_KEY}`);\n    return {\n      type: FETCH_POSTS,\n        payload: request\n    };\n}\n\nexport function createPost(values, callback) {\n    const request = axios.post(`${ROOT_URL}/posts${API_KEY}`, values)\n        .then (() => callback());\n    return {\n        type: CREATE_POST,\n        payload: request\n    };\n}\n\nexport function fetchSinglePost(id) {\n    const request = axios.get(`${ROOT_URL}/posts/${id}${API_KEY}`);\n\n    return {\n        type: FETCH_SINGLE_POST,\n        payload: request\n    };\n}\n\nexport function deletePost(id, callback) {\n   const request = axios.delete(`${ROOT_URL}/posts/${id}${API_KEY}`)\n       .then(() => callback());\n\n   return {\n       type: DELETE_POST,\n       payload: id\n   }\n}","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport PostsReducer from './reducer_posts';\n\nconst rootReducer = combineReducers({\n  posts: PostsReducer,\n  form: formReducer\n});\n\nexport default rootReducer;\n","import { FETCH_POSTS, FETCH_SINGLE_POST, DELETE_POST } from \"../actions\";\nimport _ from 'lodash';\n\nexport default function (state = {}, action) {\n    switch (action.type) {\n        case FETCH_POSTS:\n            return _.mapKeys(action.payload.data, \"id\");\n\n        case FETCH_SINGLE_POST:\n            const post = action.payload.data;\n            //key interpolation = id is set as a key of the object\n            return { ...state, [action.payload.data.id]: action.payload.data };\n\n        case DELETE_POST:\n            //Checking state object - if it has key of post id remove it and return new object\n            return _.omit(state, action.payload);\n\n        default:\n            return state;\n    }\n}","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { fetchPosts} from \"../actions\";\nimport { Link } from 'react-router-dom';\n\nclass PostsIndex extends Component {\n    componentDidMount() {\n        //navigating back to home page\n        this.props.fetchPosts();\n    }\n\n    renderPosts() {\n        return _.map(this.props.posts, post => {\n            return (\n                <li className=\"list-group-item\" key={post.id}>\n                    <Link to={`/posts/${post.id}`}>{post.title}</Link>\n                </li>\n            )\n        })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"text-right\">\n                    <Link className=\"btn btn-primary\" to=\"/posts/new\">\n                        Add a Post\n                    </Link>\n                </div>\n                <h3>Posts</h3>\n                <ul className=\"list-group\">\n                    {this.renderPosts()}\n                </ul>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { posts: state.posts };\n}\n\nexport default connect(mapStateToProps, { fetchPosts })(PostsIndex);","import React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { createPost} from \"../actions\";\n\nclass PostsNew extends Component {\n    renderField(field) {\n        //work around for input red outline\n        const { meta: { touched, error } } = field;\n        const className = `form-control ${touched && error ? 'is-invalid' : ''}`;\n\n        return (\n            <div className=\"form-group\">\n                <label>{field.label}</label>\n                <input\n                    className={className}\n                    type=\"text\"\n                    {...field.input}\n                />\n                {/*Property auto added to the field object from validate function\n                 meta.touched is fields state when it was selected in and selected out*/}\n                 <div className=\"text-danger\">\n                    {touched ? error : ''}\n                 </div>\n            </div>\n        )\n    }\n\n    onSubmit(values) {\n        this.props.createPost(values, () => {\n            this.props.history.push('/');\n        });\n    }\n\n    render() {\n        //handleSubmit is taken from reduxForm helper\n        const { handleSubmit } = this.props;\n        return (\n            //if form is valid onSubmit function will run\n            <form onSubmit={handleSubmit(this.onSubmit.bind(this))}>\n                <Field name=\"title\"  component={this.renderField} label=\"Title\"/>\n                <Field name=\"categories\"  component={this.renderField} label=\"Categories\"/>\n                <Field name=\"content\"  component={this.renderField} label=\"Post Content\"/>\n                <button type=\"submit\" className='btn btn-primary'>Submit your post</button>\n                <Link to=\"/\" className=\"btn btn-danger\">Cancel</Link>\n            </form>\n        )\n    }\n}\n\nfunction validate(values) {\n    // values contains object with values from all inputs\n    // { title: 'sometitle', categories: 'somecategories', content: 'somecontent' }\n    const errors = {};\n\n    // Validate inputs from 'values'\n    if(!values.title || values.title.length < 3) {\n        errors.title = 'Enter a valid title! (must be longer than 3 characters)'\n    }\n\n    if(!values.categories || values.categories.length < 3) {\n        errors.categories = 'Enter a valid category! (must be longer than 3 characters)'\n    }\n\n    if(!values.content || values.content.length < 6) {\n        errors.content = 'Enter some content! (at least 6 characters)'\n    }\n\n    // if errors object is empty, form will be submitted\n    // if errors has any properties redux form will be invalid\n    //name property of field component and errors.name in validate function must be exactly the same\n    return errors;\n}\n\nexport default reduxForm({\n    validate,\n    form: 'PostsNewForm'\n})(\n    connect(null, { createPost }) (PostsNew)\n)","import React, { Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { fetchSinglePost, deletePost } from \"../actions\";\n\nclass PostDisplay extends Component {\n\n    componentDidMount() {\n        //prop provided by react-router\n        const { id } = this.props.match.params;\n        this.props.fetchSinglePost(id);\n    }\n\n    onClickDeleteHandler(e) {\n        const { id } = this.props.match.params;\n        this.props.deletePost(id, () => {\n            this.props.history.push(\"/\");\n        });\n    }\n\n    render() {\n        const { post } = this.props;\n\n        if (!post) {\n            return <div>Loading post...</div>\n        }\n\n        return (\n            <div>\n                <Link to=\"/\" className=\"btn btn-warning\">Back to main page</Link>\n                <button className=\"btn btn-danger\"\n                        onClick={e => this.onClickDeleteHandler(e)}>\n                    Delete post\n                </button>\n                <h3>{post.title}</h3>\n                <h6>Categories: {post.categories}</h6>\n                <p>{post.content}</p>\n            </div>\n        )\n    }\n}\n\n\nfunction mapStateToProps({ posts }, ownProps) {\n    return {post: posts[ownProps.match.params.id] };\n}\n\nexport default connect (mapStateToProps, { fetchSinglePost, deletePost }) (PostDisplay);","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport promise from 'redux-promise';\n\nimport reducers from './reducers';\nimport PostsIndex from './components/posts_index';\nimport PostsNew from './components/post_new';\nimport PostDisplay from './components/post_display'\n\nserviceWorker.unregister();\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\n\nReactDOM.render(\n    <Provider store={createStoreWithMiddleware(reducers)}>\n        <BrowserRouter>\n            <div>\n                <Switch>\n                    <Route path=\"/posts/new\" component={PostsNew} />\n                    <Route path=\"/posts/:id\" component={PostDisplay} />\n                    <Route path=\"/\" component={PostsIndex} />\n                </Switch>\n            </div>\n        </BrowserRouter>\n    </Provider>\n    , document.getElementById('root'));\n\n"],"sourceRoot":""}